package com.lab3.resources;

import java.io.StringReader;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.lab3.wsdl.NdfdXMLPortTypeProxy;
import com.lab3.wsdl.WeatherParametersType;

/**
 * Class for calling SOAP web service of National Weather Service
 * @author Saurabh
 *Used REST API to communicate with UI.
 *Saurabh Botre
 *1001409374
 */
@Path("/nws/")
public class NWSResource {

	@GET
	@Path("getInfo")
	@Produces(MediaType.APPLICATION_JSON)
	public NWSResponse getInfo(@QueryParam("lat") double lat,@QueryParam("lon") double lon) throws Exception {

		NWSResponse res = new NWSResponse();

		NdfdXMLPortTypeProxy ndf = new NdfdXMLPortTypeProxy(); // Autogenerated stub for calling SOAP webservice
		WeatherParametersType type = new WeatherParametersType();
		//Set true the needed parameters
		type.setMaxt(true);
		type.setMint(true);
		type.setDew(true);
		type.setPop12(true);
		type.setIcons(true);
		type.setWspd(true);
		type.setWdir(true);
		type.setWaveh(true);

		//process date range for receiving data for that range
		Date date = new Date(); 
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH);
		int day = cal.get(Calendar.DAY_OF_MONTH);

		String strMonth;
		String strDay;

		if((month+1) < 10){
			strMonth = "0"+(month+1);
		}else{
			strMonth = month+"";
		}

		if(day<10){
			strDay = "0"+day;
		}else{
			strDay = ""+day;
		}

		String d1 = year+"-"+strMonth+"-"+strDay+"T00:00:00";
		String d2 = year+"-"+strMonth+"-"+strDay+"T23:59:59";

		Calendar startcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(d1).toGregorianCalendar();
		Calendar endcal = DatatypeFactory.newInstance().newXMLGregorianCalendar(d2).toGregorianCalendar();
		String outputXMLString = ndf.NDFDgen(BigDecimal.valueOf(lat), BigDecimal.valueOf(lon), "time-series", startcal, endcal, "e",type ); // Calling SOAP web service of NWS
		
		//Start Parsing XML received 
		Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder()
				.parse(new InputSource(new StringReader(outputXMLString)));

		NodeList tempNodes = doc.getElementsByTagName("temperature"); // get temperature for max, min and dew point temperatures nodes 
		Element element1 = (Element) tempNodes.item(0);
		if(element1 != null){
			NodeList title1 = element1.getElementsByTagName("value");
			String maxT = new String();
			for (int j = 0; j < title1.getLength(); j++) {
				Element line = (Element) title1.item(j);
				System.out.println("Max Temp: "+line.getTextContent());
				maxT = maxT+line.getTextContent()+"/";
			}
			res.setMaxT(maxT);
		}
		Element element2 = (Element) tempNodes.item(1);
		if(element2 != null){
			NodeList title2 = element2.getElementsByTagName("value");
			String minT = new String();
			for (int j = 0; j < title2.getLength(); j++) {
				Element line = (Element) title2.item(j);
				System.out.println("Min Temp: "+line.getTextContent());
				minT = minT+line.getTextContent()+"/";
			}
			res.setMinT(minT);
		}
		Element element3 = (Element) tempNodes.item(2);
		if(element3 != null){
			NodeList title3 = element3.getElementsByTagName("value");
			String dew = new String();
			for (int j = 0; j < title3.getLength(); j++) {
				Element line = (Element) title3.item(j);
				System.out.println("Dew Point: "+line.getTextContent());
				dew = dew+line.getTextContent()+"/";
			}
			res.setDewPoint(dew);
		}
		NodeList popNodes = doc.getElementsByTagName("probability-of-precipitation"); //get value for probability of precipitation
		Element popelement = (Element) popNodes.item(0);
		if(popelement!=null){
			NodeList popValue = popelement.getElementsByTagName("value");
			String pop12 = new String();
			for (int j = 0; j < popValue.getLength(); j++) {
				Element line = (Element) popValue.item(j);
				System.out.println("POP 12: "+line.getTextContent());
				pop12 = pop12+line.getTextContent()+"/";
			}
			res.setPop12(pop12);
		}

		NodeList wSNodes = doc.getElementsByTagName("wind-speed"); //get value for wind speed
		Element wSelement = (Element) wSNodes.item(0);
		if(wSelement!=null){
			NodeList wSValue = wSelement.getElementsByTagName("value");
			String windSpeed = new String();
			for (int j = 0; j < wSValue.getLength(); j++) {
				Element line = (Element) wSValue.item(j);
				System.out.println("Wind Speed: "+line.getTextContent());
				windSpeed = windSpeed+line.getTextContent()+"/";
			}
			res.setWindSpeed(windSpeed);
		}

		NodeList dirNodes = doc.getElementsByTagName("direction"); // get value for wind direction
		Element direlement = (Element) dirNodes.item(0);
		if(direlement != null){
			NodeList dirValue =direlement.getElementsByTagName("value");
			String windDir = new String();
			for (int j = 0; j < dirValue.getLength(); j++) {
				Element line = (Element) dirValue.item(j);
				System.out.println("Wind Direction: "+line.getTextContent());
				windDir = windDir+line.getTextContent()+"/";
			}
			res.setWindDir(windDir);

		}
		return res;
	}

}
